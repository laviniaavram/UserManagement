//Models
//User.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserManager.Service
{
    using System;
    using System.Collections.Generic;
    
    public partial class User
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public User()
        {
            this.Addresses = new HashSet<Address>();
            this.UsersPrivileges = new HashSet<UsersPrivilege>();
        }
    
        public int UserId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public int Age { get; set; }
        public Nullable<bool> IsAdmin { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Address> Addresses { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<UsersPrivilege> UsersPrivileges { get; set; }
    }
}


//Address.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserManager.Service
{
    using System;
    using System.Collections.Generic;
    
    public partial class Address
    {
        public int UserId { get; set; }
        public int AddressId { get; set; }
        public string Country { get; set; }
        public string City { get; set; }
        public string Street { get; set; }
        public int Number { get; set; }
    
        public virtual User User { get; set; }
    }
}

//Privilege.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserManager.Service
{
    using System;
    using System.Collections.Generic;
    
    public partial class Privilege
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Privilege()
        {
            this.UsersPrivileges = new HashSet<UsersPrivilege>();
        }
    
        public int PrivilegeId { get; set; }
        public string PrivilegeName { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<UsersPrivilege> UsersPrivileges { get; set; }
    }
}

//UsersPrivilege.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserManager.Service
{
    using System;
    using System.Collections.Generic;
    
    public partial class UsersPrivilege
    {
        public int UserId { get; set; }
        public int PrivilegeId { get; set; }
        public int UsPrivId { get; set; }
    
        public virtual Privilege Privilege { get; set; }
        public virtual User User { get; set; }
    }
}
//Interfaces
/IUnitOfWork.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UserManager.Service.Repository
{
    /// <summary>
    /// Unit of work provides access to repositories.  Operations on multiple repositories are atomic through
    /// the use of Commit().
    /// </summary>
    public interface IUnitOfWork : IDisposable
    {
        void Commit();
    }
}

//IGenericRepo.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace UserManager.Service.Repository
{
    public interface IGenericRepository<TEntity> where TEntity : class
    {
        IEnumerable<TEntity> GetAll();
        TEntity GetByID(int id);
        IQueryable<TEntity> Find(Expression<Func<TEntity, bool>> predicate);
        void Add(TEntity entity);
        void Remove(TEntity entity);
        void RemoveRange(IEnumerable<TEntity> entities);
    }
}

//IUsersRepo.cs
using System.Collections.Generic;
using UserManager.Service.DTOs;

namespace UserManager.Service.Repository
{
    public interface IUserRepository:IGenericRepository<User>
    {
    }
}

//IAddressRepo.cs
using System.Collections.Generic;
using UserManager.Service.DTOs;

namespace UserManager.Service.Repository
{
    public interface IAddressesRepository:IGenericRepository<Address>
    { 
 
    }
}

//IPrivilegeRepo
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UserManager.Service.Repository
{
    public interface IPrivilegesRepository
    {

    }
}

//Repository
//UnitOfWork
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using UserManager.Service;

namespace UserManager.Service.Repository
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly UserMDBEntities _context = new UserMDBEntities();
        public UnitOfWork(UserMDBEntities context)
        {
            _context = context;
        }

        private UsersRepository _usersRepo;
        private AddressesRepository _addressRepo;
        private PrivilegesRepository _privRepo;
        /// <summary>
        /// Commits changes made to all repositories
        /// </summary>
        public void Commit()
        {
            _context.SaveChanges();
        }

        public void Dispose()
        {
            _context.Dispose();
        }

        public UsersRepository UsersRepo
        {
            get
            {
                if (_usersRepo == null)
                {
                    _usersRepo = new UsersRepository(_context);
                }
                return _usersRepo;
            }
        }
        public AddressesRepository AddressRepo
        {
            get
            {
                if (_addressRepo == null)
                {
                    _addressRepo = new AddressesRepository(_context);
                }
                return _addressRepo;
            }
        }

        public PrivilegesRepository PrivRepo
        {
            get
            {
                if (_privRepo==null)
                {
                    _privRepo = new PrivilegesRepository(_context);
                }
                return _privRepo;
            }
        }
    }
}

//GenericRepo.cs
using Microsoft.ApplicationInsights.Extensibility.Implementation;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Remoting.Contexts;
using System.Web;
using System.Web.UI.WebControls;
using UserManager.Service.Repository;

namespace UserManager.Service.Repository
{
    public class GenericRepository<TEntity>:IGenericRepository<TEntity> where TEntity : class
    {
        protected readonly UserMDBEntities Context;
        protected DbSet<TEntity> dbSet;

        public GenericRepository(UserMDBEntities context)
        {
            Context = context;
            dbSet = context.Set<TEntity>();
        }

        public IEnumerable<TEntity> GetAll()
        {
            return Context.Set<TEntity>().ToList();
        }
        public TEntity GetByID(int UserId)
        {
            return Context.Set<TEntity>().Find(UserId);
        }
        public IQueryable<TEntity> Find(Expression<Func<TEntity,bool>> predicate)
        {
            return Context.Set<TEntity>().Where(predicate);
        }
        public void Add(TEntity entity)
        {
             Context.Set<TEntity>().Add(entity);
        }
       public void Update(TEntity entity)
       {
           Context.Set<TEntity>().Add(entity);
       }

        public void Remove(TEntity entity)
        {
            Context.Set<TEntity>().Remove(entity);
        }
        public void RemoveRange(IEnumerable<TEntity> entities)
        {
            Context.Set<TEntity>().RemoveRange(entities);
        }
    }
}

//UsersRepo
using System;
using System.Collections.Generic;
using System.Linq;

namespace UserManager.Service.Repository
{
    public class UsersRepository : GenericRepository<User>, IUserRepository
    {
        public UsersRepository(UserMDBEntities context)
            : base(context)
        {
        }
        public UserMDBEntities UserContext
        {
            get { return Context as UserMDBEntities; }//casting
        }
    }
}

//AdressesRepo
using System.Collections.Generic;
using System.Linq;
using UserManager.Service.DTOs;

namespace UserManager.Service.Repository
{
    public class AddressesRepository: GenericRepository<Address>, IAddressesRepository
    {
        public AddressesRepository(UserMDBEntities context)
            : base(context)
        {
    }
    public UserMDBEntities context
    {
        get { return Context as UserMDBEntities; }//casting
    }
}
}

//PrivilegesRepo
using Microsoft.ApplicationInsights.Extensibility.Implementation;
using System.Collections.Generic;

namespace UserManager.Service.Repository
{
    public class PrivilegesRepository : GenericRepository<UsersPrivilege>, IPrivilegesRepository
    {
        public PrivilegesRepository(UserMDBEntities context)
            : base(context)
        {
        }
        public UserMDBEntities UserContext
        {
            get { return Context as UserMDBEntities; }//casting
        }
    }

}

//DTOs
//UserDTO
using System;
using System.Collections.Generic;

namespace UserManager.Service.DTOs
{
    public class UserDTO
    {
        public int UserId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public int Age { get; set; }
        public Nullable<bool> IsAdmin{ get; set; }
        public List<AddressDTO> AddressesOfTheUser { get; set; }
        public List<UserPrivilegeDTO> PrivilegesOfTheUser { get; set; }
    }
}

//AddressDTO
namespace UserManager.Service.DTOs
{
    public class AddressDTO
    {
        public int AddressId { get; set; }
        public string Country { get; set; }
        public string City { get; set; }
        public string Street { get; set; }
        public int Number { get; set; }
    }
}

//PrivilegeDTO
namespace UserManager.Service.DTOs
{
    public class PrivilegeDTO
    {
        public int PrivilegeId { get; set; }
        public string PrivilegeName { get; set; }
    }
}

//Usenamespace UserManager.Service.DTOs
{
    public class UserPrivilegeDTO
    {
        public int PrivilegeId { get; set; }
        public int UsPrivId { get; set; }
        public int UserId{ get; set; }

    }
}

//IService
using System.Collections.Generic;
using UserManager.Service.DTOs;

namespace UserManager.Service.Service
{
    interface IUserService
    {
        List<UserDTO> GetAll();
        UserDTO GetUserById(int userId);
        void AddUser(UserDTO user);
        void DeleteUser(int userId);
        void Update(UserDTO user);
    }
}


//Service
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UserManager.Service;
using UserManager.Service.DTOs;
using UserManager.Service.Repository;

namespace UserManager.Service.Service
{
    public class UserService : IUserService
    {
        public UserMDBEntities _context = new UserMDBEntities();
        public List<UserDTO> GetAll()
        {
            var unitOfWork = new UnitOfWork(new UserMDBEntities());
            List<UserDTO> ListOfUsers = new List<UserDTO>();
            foreach (var item in unitOfWork.UsersRepo.GetAll())
            {
                UserDTO user = new UserDTO();
                user.UserId = item.UserId;
                user.FirstName = item.FirstName;
                user.LastName = item.LastName;
                user.Email = item.Email;
                user.Age = item.Age;
                user.IsAdmin = item.IsAdmin;
                List<AddressDTO> listofadr = new List<AddressDTO>();
                foreach (var adr in item.Addresses)
                {
                    listofadr.Add(new AddressDTO
                    {
                        AddressId = adr.AddressId,
                        City = adr.City,
                        Country = adr.Country,
                        Street = adr.Street,
                        Number = adr.Number
                    });
                }
                user.AddressesOfTheUser = listofadr;
                List<UserPrivilegeDTO> listofuspriv = new List<UserPrivilegeDTO>();
                foreach (var priv in item.UsersPrivileges)
                {
                    listofuspriv.Add(new UserPrivilegeDTO
                    {
                        PrivilegeId = priv.PrivilegeId,
                        UsPrivId = priv.UsPrivId,
                        UserId = priv.UserId,
                    });
                }
                user.PrivilegesOfTheUser = listofuspriv;
                ListOfUsers.Add(user);
            }
            return ListOfUsers;
        }
        public UserDTO GetUserById(int userId)
        {
            var unitOfWork = new UnitOfWork(new UserMDBEntities());
            foreach (var user in GetAll())
            {
                if (user.UserId == userId)
                {
                    return user;
                }
            }
            return null;
        }

        public void Update(UserDTO userDTO)
        {
            var unitOfWork = new UnitOfWork(new UserMDBEntities());
            foreach (var user in unitOfWork.UsersRepo.GetAll())
            {
                if (user.UserId == userDTO.UserId)
                {
                    user.UserId = userDTO.UserId;
                    user.FirstName = userDTO.FirstName;
                    user.LastName = userDTO.LastName;
                    user.Email = userDTO.Email;
                    user.Age = userDTO.Age;
                    user.IsAdmin = userDTO.IsAdmin;

                    unitOfWork.AddressRepo.RemoveRange(user.Addresses);
                    foreach (var adr in user.Addresses)
                    {
                        if (adr.UserId == userDTO.UserId)
                        {
                            user.Addresses.Add(new Address
                            {
                                AddressId = adr.AddressId,
                                City = adr.City,
                                Country = adr.Country,
                                Street = adr.Street,
                                Number = adr.Number
                            });
                        }
                    }

                    unitOfWork.PrivRepo.RemoveRange(user.UsersPrivileges);
                    foreach (var priv in user.UsersPrivileges)
                    {
                        if (priv.UserId == userDTO.UserId)
                        {
                            user.UsersPrivileges.Add(new UsersPrivilege
                            {
                                PrivilegeId = priv.PrivilegeId,
                                UsPrivId = priv.UsPrivId,
                                UserId = priv.UserId
                            });
                        }
                    }
                }
                unitOfWork.Commit();
            }
        }

        public void AddUser(UserDTO user)
        {
            var unitOfWork = new UnitOfWork(new UserMDBEntities());
            User userToAdd = new User();
            userToAdd.FirstName = user.FirstName;
            userToAdd.LastName = user.LastName;
            userToAdd.Email = user.Email;
            userToAdd.Age = user.Age;
            userToAdd.IsAdmin = user.IsAdmin;

            if (user.AddressesOfTheUser == null)
            { return; }
            foreach (var adr in user.AddressesOfTheUser)
            {
                userToAdd.Addresses.Add(new Address
                {
                    AddressId = adr.AddressId,
                    Country = adr.Country,
                    City = adr.City,
                    Street = adr.Street,
                    Number = adr.Number
                });
            }

            foreach (var priv in user.PrivilegesOfTheUser)
            {
                userToAdd.UsersPrivileges.Add(new UsersPrivilege
                {
                    UsPrivId = priv.UsPrivId,
                    PrivilegeId = priv.PrivilegeId
                });
            }
            unitOfWork.UsersRepo.Add(userToAdd);
            unitOfWork.Commit();
        }



        public void DeleteUser(int userId)
        {
            var unitOfWork = new UnitOfWork(new UserMDBEntities());
            foreach (var item in unitOfWork.UsersRepo.GetAll().ToList())
                try
                {

                    foreach (var adr in item.Addresses.ToList())
                    {
                        if (adr.UserId == userId)
                        {
                            item.Addresses.Remove(adr);
                            unitOfWork.AddressRepo.Remove(adr);
                        }
                    }
                    foreach (var priv in item.UsersPrivileges.ToList())
                    {
                        if (priv.UserId == userId)
                        {
                            item.UsersPrivileges.Remove(priv);
                            unitOfWork.PrivRepo.Remove(priv);
                        }
                    }
                    if (item.UserId == userId)
                    {
                        unitOfWork.UsersRepo.Remove(item);
                    }
                    unitOfWork.Commit();
                }
                catch (Exception ex)
                {
                    string filePath = @"D:\Error.txt";

                    using (StreamWriter writer = new StreamWriter(filePath, true))
                    {
                        writer.WriteLine("Error Logging" + Environment.NewLine + "StackTrace :" + ex.StackTrace +
                            "" + Environment.NewLine + "Date :" + DateTime.Now.ToString());
                        writer.WriteLine(Environment.NewLine + "------------" + Environment.NewLine);
                    }
                    throw;
                }
        }
    }
}

//Controller
using System.Collections.Generic;
using System.Web.Http;
using UserManager.Service.DTOs;
using UserManager.Service.Service;
using System.Web.Http.Cors;


namespace UserManager.Service.Controllers
{
    [RoutePrefix("api")]
    [EnableCors(origins: "http://localhost:57286", headers: "*", methods: "*")]
    public class DemoController : ApiController
    {
        private IUserService service = new UserService();

        [Route("users")]
        [HttpGet]
        public List<UserDTO> GetAll()
        {
            return service.GetAll();

        }
        [Route("users/{userId}")]
        [HttpGet]
        public UserDTO GetUserById(int userId)
        {
            return service.GetUserById(userId);
        }
        [Route("users")]
        [HttpPost]
        public void AddUser(UserDTO user)
        {
          service.AddUser(user);
       }
        [Route("users/{userID}")]
        [HttpDelete]
        public void DeleteUser(int userID)
        {
            service.DeleteUser(userID);
        }
        [Route("users")]
        [HttpPut]
        public void PutUser(UserDTO user)
        {
            service.Update(user);
        }
    }
}

